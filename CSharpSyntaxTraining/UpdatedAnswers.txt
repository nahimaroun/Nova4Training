   public static void Main(string[] args)
   {

       //problem 1 :

       //int f = 35;

       //int g = 63;

       //Dictionary<char, int> variables = new Dictionary<char, int>();

       //variables.Add('g', g);

       //variables.Add('f', f);

       //Func<int, int, char> returnBigger = (f, g) => g > f ? 'g' : 'f';

       //char result = returnBigger(f, g);

       //Console.WriteLine($"The larger number is {result}");

       //-----------------------------------------------------------

       //problem 2 :

       //int[] arr1 = { 2, 3, 4, 5, 6 };
       //int[] arr2 = { 1, 3, 4, 5, 7 };
       //bool isTrue = false;

       //if (arr1.Min() > arr2.Min())
       //{
       //    if (arr1.Max() < arr2.Max())
       //    isTrue = true; 
       //}
       //else
       //{
       //    isTrue = false;
       //}

       //Console.WriteLine(isTrue);

       //----------------------------------------------------------



       //problem 3 :

       //Console.Write("Enter the number : ");
       //int num = Convert.ToInt32(Console.ReadLine());

       //Console.Write("Enter the length : ");
       //int length = Convert.ToInt32(Console.ReadLine());

       //int[] multiples = ArrayOfMultiples(num, length);

       //Console.WriteLine("Result: [" + string.Join(", ", multiples) + "]");

       //static int[] ArrayOfMultiples(int num, int length) => Enumerable.Range(1, length).Select(i => num * i).ToArray();

       //---------------------------------------------------------


       // problem 4 :

       //string Greet = "HEllo World";

       //char[] charArray = Greet.ToCharArray();

       //for (int i = 0; i < charArray.Length; i++)
       //{
       //    if (char.IsLower(charArray[i]))
       //    {
       //        charArray[i] = char.ToUpper(charArray[i]);
       //    }
       //    else if (char.IsUpper(charArray[i]))
       //    {
       //        charArray[i] = char.ToLower(charArray[i]);
       //    }
       //}
       //Console.WriteLine(charArray);

       //--------------------------------------------

       //problem 5 :

       //int numb = 24;

       //bool isPrime = Enumerable.Range(2, numb - 2).All(i => numb % i != 0);

       //for (int i = 2; i < numb; i++)
       //{
       //    if (numb % i == 0)
       //    {
       //        isPrime = false;
       //        break;
       //    }

       //}

       //if (isPrime)
       //{
       //    Console.WriteLine(numb + " is a prime number.");
       //}

       //else
       //{
       //    int closestPrime = numb;
       //    while (true)
       //    {
       //        closestPrime++;
       //        if (Enumerable.Range(2, closestPrime - 2).All(i => closestPrime % i != 0))
       //            break;
       //    }

       //    Console.WriteLine(numb + " isn't a prime number.");
       //    Console.WriteLine(closestPrime + " is the closest prime number.");

       //}

       //---------------------------------------------------

       //problem 6 : 

       //string text = "Computer Science";

       //string cleanedText = new string(text.ToLower().Where(char.IsLetter).ToArray());

       //var charFrequency = cleanedText.GroupBy(c => c)
       //                               .ToDictionary(g => g.Key, g => g.Count());

       //int maxFrequency = charFrequency.Values.Max();

       //var maxChars = charFrequency.Where(pair => pair.Value == maxFrequency && pair.Value != 1)
       //                            .Select(pair => pair.Key);

       //string output = maxChars.Count() == 1 ? maxChars.First().ToString() : string.Join(",", maxChars);
       //Console.WriteLine(output != "" ? output : "No Repetition");





       // ------------------------------------------------------



       //problem 7 :

       //0, 0, 0, 5, -5

       //1, 2, 3

       //int[] nums = { 0, 0, 0, 5, -5 };

       //Array.Sort(nums);

       //List<List<int>> result = new List<List<int>>();

       //for (int i = 0; i < nums.Length - 2; i++)
       //{
       //    if (i > 0 && nums[i] == nums[i - 1])
       //        continue;

       //    int left = i + 1;
       //    int right = nums.Length - 1;

       //    while (left < right)
       //    {
       //        int sum = nums[i] + nums[left] + nums[right];

       //        if (sum == 0)
       //        {
       //            result.Add(new List<int> { nums[i], nums[left], nums[right] });

       //            while (left < right && nums[left] == nums[left + 1])
       //                left++;
       //            while (left < right && nums[right] == nums[right - 1])
       //                right--;


       //            left++;
       //            right--;
       //        }
       //        else if (sum < 0)
       //        {
       //            left++;
       //        }
       //        else
       //        { 
       //            right--;
       //        }
       //    }
       //}

       //// Print the result
       //Console.WriteLine("Result:");
       //foreach (var triplet in result)
       //{
       //    Console.WriteLine("{" + string.Join(", ", triplet) + "}");
       //}




       //------------------------------------------------------



       //problem 8 :

       //Func<long, long[]> MaxMin = num =>
       //{
       //    string numStr = num.ToString();

       //    long max = num;
       //    long min = num;

       //    for (int i = 0; i < numStr.Length; i++)
       //    {
       //        for (int j = i + 1; j < numStr.Length; j++)
       //        {
       //            string newNumStr = Swap(numStr, i, j);

       //            if (newNumStr[0] != '0') // Leading zeros are not permitted
       //            {
       //                max = Math.Max(max, long.Parse(newNumStr));
       //                min = Math.Min(min, long.Parse(newNumStr));
       //            }
       //        }
       //    }

       //    return new long[] { max, min };
       //};

       //string Swap(string numStr, int i, int j)
       //{
       //    char[] numArray = numStr.ToCharArray();
       //    char temp = numArray[i];
       //    numArray[i] = numArray[j];
       //    numArray[j] = temp;
       //    return new string(numArray);
       //}

       //long[] result1 = MaxMin(12340);
       //Console.WriteLine($"maxmin(12340)  {{ {result1[0]}, {result1[1]} }}");

       //long[] result2 = MaxMin(98761);
       //Console.WriteLine($"maxmin(98761)  {{ {result2[0]}, {result2[1]} }}");

       //long[] result3 = MaxMin(90000);
       //Console.WriteLine($"maxmin(90000)  {{ {result3[0]}, {result3[1]} }}");

       //long[] result4 = MaxMin(11321);
       //Console.WriteLine($"maxmin(11321)  {{ {result4[0]}, {result4[1]} }}");


   